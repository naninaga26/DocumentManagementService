// AuthController.cs
namespace DocumentManagement.API.Controllers
{
    [ApiController]
    [Route("api/auth")]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;
        
        public AuthController(IAuthService authService)
        {
            _authService = authService;
        }
        
        [HttpPost("register")]
        public async Task<ActionResult<UserDto>> Register([FromBody] RegisterDto registerDto)
        {
            var result = await _authService.RegisterAsync(registerDto);
            return Ok(result);
        }
        
        [HttpPost("login")]
        public async Task<ActionResult<AuthResultDto>> Login([FromBody] LoginDto loginDto)
        {
            var result = await _authService.LoginAsync(loginDto);
            return Ok(result);
        }
        
        [HttpPost("logout")]
        [Authorize]
        public async Task<ActionResult> Logout()
        {
            var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                return Unauthorized();
            }
            
            await _authService.LogoutAsync(userId);
            return Ok(new { message = "Successfully logged out" });
        }
    }
}

// DocumentsController.cs
namespace DocumentManagement.API.Controllers
{
    [ApiController]
    [Route("api/documents")]
    [Authorize]
    public class DocumentsController : ControllerBase
    {
        private readonly IDocumentService _documentService;
        
        public DocumentsController(IDocumentService documentService)
        {
            _documentService = documentService;
        }
        
        [HttpPost]
        [Authorize(Roles = "Admin,Editor")]
        public async Task<ActionResult<DocumentDto>> UploadDocument([FromForm] UploadDocumentDto uploadDto, IFormFile file)
        {
            if (file == null || file.Length == 0)
            {
                return BadRequest("No file was uploaded.");
            }
            
            var userId = Guid.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            
            using var stream = file.OpenReadStream();
            var result = await _documentService.UploadDocumentAsync(
                uploadDto, 
                stream, 
                file.FileName, 
                file.ContentType, 
                userId);
                
            return CreatedAtAction(nameof(GetDocumentById), new { id = result.Id }, result);
        }
        
        [HttpGet]
        public async Task<ActionResult<PagedResultDto<DocumentDto>>> GetDocuments([FromQuery] DocumentFilterDto filterDto)
        {
            var result = await _documentService.GetDocumentsAsync(filterDto);
            return Ok(result);
        }
        
        [HttpGet("{id}")]
        public async Task<ActionResult<DocumentDto>> GetDocumentById(Guid id)
        {
            var result = await _documentService.GetDocumentByIdAsync(id);
            return Ok(result);
        }
        
        [HttpPut("{id}")]
        [Authorize(Roles = "Admin,Editor")]
        public async Task<ActionResult<DocumentDto>> UpdateDocument(Guid id, [FromBody] UpdateDocumentDto updateDto)
        {
            var userId = Guid.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            var result = await _documentService.UpdateDocumentAsync(id, updateDto, userId);
            return Ok(result);
        }
        
        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<ActionResult> DeleteDocument(Guid id)
        {
            var userId = Guid.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            await _documentService.DeleteDocumentAsync(id, userId);
            return NoContent();
        }
        
        [HttpGet("{id}/download")]
        public async Task<ActionResult> DownloadDocument(Guid id)
        {
            var userId = Guid.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            var downloadUrl = await _documentService.GetDocumentDownloadUrlAsync(id, userId);
            return Ok(new { downloadUrl });
        }
    }
}

// IngestionController.cs
namespace DocumentManagement.API.Controllers
{
    [ApiController]
    [Route("api/documents/{documentId}/ingestion")]
    [Authorize]
    public class IngestionController : ControllerBase
    {
        private readonly IIngestionService _ingestionService;
        
        public IngestionController(IIngestionService ingestionService)
        {
            _ingestionService = ingestionService;
        }
        
        [HttpPost]
        [Authorize(Roles = "Admin,Editor")]
        public async Task<ActionResult<IngestionResultDto>> TriggerIngestion(Guid documentId)
        {
            var userId = Guid.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            var result = await _ingestionService.TriggerIngestionAsync(documentId, userId);
            return Accepted(result);
        }
        
        [HttpGet]
        public async Task<ActionResult<IngestionStatusDto>> GetIngestionStatus(Guid documentId)
        {
            var userId = Guid.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            var result = await _ingestionService.GetIngestionStatusAsync(documentId, userId);
            return Ok(result);
        }
        
        [HttpDelete]
        [Authorize(Roles = "Admin,Editor")]
        public async Task<ActionResult<IngestionStatusDto>> CancelIngestion(Guid documentId)
        {
            var userId = Guid.Parse(User.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            var result = await _ingestionService.CancelIngestionAsync(documentId, userId);
            return Ok(result);
        }
    }
}